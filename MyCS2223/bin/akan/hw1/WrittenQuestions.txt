Arianna Kan
HW1
Written Questions

Q1. Stack Experiments (30 Points):
----------------------------------

1.1. observed output: 7.0
	 ops: The first item in the ops stack is a "+" and the next item is null. There remains 1 item in the stack because StdIn is empty
	 	and after the first calculation following the ")", the resulting value is pushed back onto the stack and the while loop terminates. 
	 vals: The only item in the stack is 2.0, and the following item after that is null.
	 	There remains 1 item in the stack (n = 1)
	 	
1.2. observed output: 7.0
	 ops: The only item in the ops stack is "-" (n = 1)
	 vals: The stack is empty.
	 
1.3. observed output: 99.0
	 ops: The only item in the ops stack is "-" (n = 1)
	 vals: The stack is empty.
	 	
1.4. observed output: 1.75
	 ops: The ops stack has 2 items in it. The first item is "+", the last item is "*".
	 vals: The vals stack has 2 items in it. The first item is a 3 and the last item is a 2.
	 
1.5. observed output: 4.625
	 ops: The stack is empty.
	 vals: The stack is empty.
	 
1.6. MODIFIED

1.7. observed output: 2.0
	 ops: The stack is empty.
	 vals: The stack is empty.
	 Result: Adding the new floor operation "ceiling" simply meant applying Math.ceil() to the current value v. So in order of operation, 
	 	3.5 gets popped first and then the "%", which triggers vals to pop() the next item and "calculate" the resulting answer before 
	 	pushing it back onto the vals stack. The next ")" pops off the next ops item, which is the ceiling operand, and triggers the
		vals stack to pop() the first item, which was the result from the last calculation. In other words, 8.625 mod 3.5 returns 1.625, 
		and the ceiling operation computes the smallest integer greater than or equal to 1.625, which is 2.0

Also be sure to copy Evaluate to USERID.hw1, modify it, and include in your submission.

Q2. ArraySearch Programming Exercise (30 Points):
----------------------------------------------

2.1 Submit modified RowOrderedArraySolution
2.2 Submit modified BandedArraySolution 
2.3 Submit modified SpiralArraySolution 

Q3. Counting Computations Exercise (20 Points):
-----------------------------------------------

3.1 Enter formula for computing number of array inspections for UnknownArraySolution

   f(n) = (n^3 - n^2)(n^2) + ((n^2)(n^2 + 1))/2

3.2 Enter formula for computing number of array inspections for ImprovedUnknownArraySolution

   g(n) = (n^2)([n-2]n^2 - [n-3]) + ((n^2)(n^2 + 1))/2
   

Q4. Stack Programming Exercise (20 Points):
-------------------------------------------

4.1 Submit modified Computation 




-------------------------------------------

There are some bonus questions on the homework. If you attempt these, be sure to 
clearly identify that you have done so in this written homework

Q2.1.1 Bonus
Q2.2.1 Bonus
Q2.3.1 Bonus - I have completed this bonus, with 2444 inspections for 13x13
BQ5 FractalArraySolution





